//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class DFS_table_RA<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
		
	public Hashtable <String, Hashtable<String, String>> myclasses = new Hashtable <String, Hashtable<String, String>>();
	public Hashtable <String, Vector> fnargs = new Hashtable <String, Vector>();
	public Hashtable <String, String> famtree = new Hashtable <String, String>();
	public Hashtable <String, Integer> flag = new Hashtable <String, Integer>();
	public Vector cnames = new Vector();
	public int count = 0;
	public int total = 0;
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      //build closures of classes
//      while(count < total)
//      {
//	      Iterator hmi = famtree.entrySet().iterator();
//	      
//	      while(hmi.hasNext())
//	      {
//	    	  Map.Entry mapElement = (Map.Entry)hmi.next();
//	    	  String prt = (String) mapElement.getValue(); //get parent
//	    	  String cld = (String) mapElement.getKey();   //get child
////	    	  System.out.println(cld+ " " + prt);
//	    	  if(flag.get(prt)==1 && flag.get(cld)==0)	//if parent is closed, we can close the child
//	    	  {
//	    		  //adding entry by entry
////	    		  System.out.println("Entered");
//	        	  Hashtable <String, String> ht_prt = myclasses.get(prt);
//	        	  Hashtable <String, String> ht = (Hashtable<String, String>) ht_prt.clone();
//	        	  Hashtable <String, String> htret = myclasses.remove(cld);
//	        	  Iterator hm1 = ht.entrySet().iterator();
//	              while(hm1.hasNext())
//	              {
//	            	  Map.Entry mapEl = (Map.Entry)hm1.next();
//	            	  String key = (String )mapEl.getKey();
//	            	  if(!htret.containsKey(key) )	//not present then add
//	            	  {
//	            		  htret.put(key ,(String) mapEl.getValue());
//	            	  }
//	            	  else			//present, then check if its a function
//	            	  {
//	            		  int l = key.length();
//	//            		  System.out.println(key+ " "+ l);
//	            		  if(l>3)
//	            		  {
//	    	        		  if(key.charAt(l-2)=='(' && key.charAt(l-1)==')') //yes, then check return type and arguments
//	    	        		  {
//	    	        			  if(mapElement.getValue() == htret.get(key)) //same return type, check for args
//	    	        			  {
//	    	        				  String tmp1 = key.substring(0, l-2);
//	    	        				  String tmp2 = tmp1;
//	    	        				  tmp1 = tmp1 + ":" + prt;
//	    	        				  tmp2 = tmp2 + ":" + cld;
//	//    	        				  System.out.println(tmp1 + " " + tmp2);
//	    	        				  Vector v1 = fnargs.get(tmp1);
//	    	        				  Vector v2 = fnargs.get(tmp2);
//	    	        				  if(!v1.equals(v2)) 
//	    	        				  {
//	    	        					  System.out.println("OVERLOADED THE CHILDREN FUNCTION ARGUMENTS");
//	//    	        					  System.exit(0);
//	    	        				  }
//	    	        			  }
//	    	        			  else
//	    	        			  {
//	    	        				  System.out.println("Return value different of children class function");
//	    	        				  //System.exit(0);
//	    	        			  }
//	    	        		  }
//	            		  }
//	            	  }
//	              }
//	              myclasses.put(cld,htret);
//	              flag.remove(cld);
//	        	  flag.put(cld,1); //change flag to closed
//	        	  count++;
//	    	  } 
//	      }    
//      }
      //now go to each class and fillup the functions
//      Iterator vi = cnames.iterator();
      
//      while(vi.hasNext())
//      {
//    	  String key = (String) vi.next();
//    	  Hashtable <String, String> ht = myclasses.remove(key);
//    	  
//    	  Iterator hmi = ht.entrySet().iterator();
//	      
//	      while(hmi.hasNext())
//	      {
//	    	  Map.Entry mapElement = (Map.Entry)hmi.next();
//	    	  String ftype = (String) mapElement.getValue(); //get type
//	    	  String fname = (String) mapElement.getKey();   //get name
//	    	  
//	    	  int l = fname.length();
//	    	  if(l>3)
//	    	  {
//	    		  
//	    	  }
//	      }
//      }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id0 =(String) n.f1.accept(this, argu);
      cnames.add(id0);
      flag.put(id0, 1);
      count=count+1;
      total = total+1;
//      System.out.println("ClassName: "+ id0);
      Hashtable <String, String> ht = new Hashtable<String, String>();
      ht.put("1234", "1234_weird");
      myclasses.put(id0, ht);
      argu = (A) id0;
      n.f2.accept(this, argu);  
      n.f3.accept(this, argu);
      
      Hashtable <String, String> ht0 = (Hashtable<String, String>) myclasses.get(id0).clone();
      if(myclasses.containsKey("fakename"))
    	  myclasses.remove("fakename");
      myclasses.put("fakename",ht0);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      
      if(myclasses.containsKey("fakename"))
    	  myclasses.remove("fakename");
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String cld = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String prt =  (String) n.f3.accept(this, argu);
      cnames.add(cld);
      famtree.put(cld, prt);
      flag.put(cld, 0);
      total = total+1;
      //put empty HT for children
      Hashtable <String,String> ht0 = new Hashtable <String,String>();
      ht0.put("1234", "1234_weird");
      myclasses.put(cld,ht0);
     
      argu = (A) cld;
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      //get variables defined inside children
      
      
      Hashtable <String, String> ht_ret = myclasses.get(cld);
      Hashtable <String, String> ht1 = (Hashtable<String, String>) ht_ret.clone();
      if(myclasses.containsKey("fakename"))
    	  myclasses.remove("fakename");
      myclasses.put("fakename",ht1);
      n.f6.accept(this, argu);
      //get function names inside children
      n.f7.accept(this, argu);
      
      
      if(myclasses.containsKey("fakename"))
    	  myclasses.remove("fakename");
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null; 
      String typename = (String) n.f0.accept(this, argu);
      String id1 = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      Hashtable  <String, String> httemp = (Hashtable  <String, String>) myclasses.remove((String) argu);
      
      if(httemp.containsKey(id1))
      {
    	  System.out.println("Redeclaration within same scope: "+ (String) argu);
    	  System.exit(0);
      }
      else
    	  httemp.put(id1, typename);
            
      if(httemp.containsKey("1234"))
      {
    	  httemp.remove("1234");
      }
      if(httemp.containsKey("oooof"))
      {
    	  httemp.remove("oooof");
      }
      myclasses.put((String) argu, httemp);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      String tp = (String) n.f1.accept(this, argu);
      String id0 = (String)n.f2.accept(this, argu);
      Hashtable  <String, String> httemp = (Hashtable  <String, String>) myclasses.remove((String) argu);
      if(httemp.containsKey(id0+"()"))
      {
    	  System.out.println("REDECLARATION of same name function");
//    	  System.exit(0);
      }
      else
      {  
    	  httemp.put(id0+"()", tp);
      }
      myclasses.put((String) argu, httemp); //add fn and return type to the class
            
      Hashtable  <String, String> ht = (Hashtable  <String, String>) myclasses.remove("fakename"); //class varDecs
      
      Hashtable <String, String> ht0 = (Hashtable<String, String>) ht.clone(); //class varDecs
      Hashtable <String, String>ht1 = new Hashtable <String, String>();
      ht1.put("oooof", "oooof");
      myclasses.put("fakename", ht);
      
      id0 = id0+":"+(String)argu;
      myclasses.put(id0, ht1);
      argu = (A) id0;
      Vector v = new Vector();
//      v.add("1234");
      fnargs.put(id0, v);
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      
      // insert non redeclared variables of parent in function
//      Hashtable <String, String> htret = myclasses.remove((String) argu);
//      
//      
//      Iterator hmi = ht0.entrySet().iterator();
//      while(hmi.hasNext())
//      {
//    	  Map.Entry mapElement = (Map.Entry)hmi.next();
//    	  if(!htret.containsKey( mapElement.getKey()) )
//    	  {
//    		  htret.put((String)mapElement.getKey(),(String) mapElement.getValue());
//    	  }
//      }
//      myclasses.put((String) argu,htret);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      String tp = (String) n.f0.accept(this, argu);
      String in = (String) n.f1.accept(this, argu);
      Hashtable  <String, String> httemp = (Hashtable  <String, String>) myclasses.remove((String) argu);
      httemp.put(in, tp);
      myclasses.put((String) argu,httemp);
      
      Vector v = fnargs.remove((String) argu);
      v.add(tp);
      fnargs.put((String) argu, v);
      
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
//      R _ret=null;
      R _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret= (R) "int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret= (R) "boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret= (R) "int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
//      R _ret=null;
     R _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
