//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

public class TYPE_check_RA<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	public Hashtable <String, Hashtable<String, String>> myclasses; 
	public Hashtable <String, Vector> fnargs;
	public Hashtable <String, String> famtree;
	public Vector cnames = new Vector();
	public int totclass;
	Vector myargs = new Vector();
	
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
	   R _ret=null;
	  DFS_table_RA p = (DFS_table_RA) argu;
      myclasses = (Hashtable<String, Hashtable<String, String>>) p.myclasses.clone();
      fnargs = (Hashtable<String, Vector>) p.fnargs.clone();
      famtree = (Hashtable<String, String>) p.famtree.clone();
      cnames =  (Vector) p.cnames.clone();
      totclass = p.total;
      
//      System.out.println("HASHTABLE:" + myclasses + "\n");
//      System.out.println("FN Args: "+fnargs+ "\n");
//      System.out.println("CNAMES: "+cnames+ "\n");
//      System.out.println("FAMTREE: "+famtree+ "\n");
//      System.out.println("TOTCLASS: "+ totclass + "\n");
    
      //detect cycles (if any)
      
      Vector seen = new Vector();
      Iterator hmi = famtree.entrySet().iterator();
      
      while(hmi.hasNext())
      {
    	  Map.Entry mapE = (Map.Entry) hmi.next();
    	  
    	  String prt = (String) mapE.getKey();
    	  String cld = (String) mapE.getValue();
//    	  System.out.println(prt+" "+cld);
    	  
    	  seen.clear();
    	  seen.add(prt);
    	  seen.add(cld);
    	  while(famtree.containsKey(cld))
    	  {
//    		  System.out.println(seen);
    		  cld = famtree.get(cld);
//    		  System.out.println(cld);
    		  if(seen.contains(cld))
    		  {
    			  System.out.println("Type error");
    			  System.exit(0);
    		  }
    		  else
    		  {
    			  seen.add(cld);
    		  }
    	  }
    	 
      }
      
      argu =(A) "";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   } 

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
//      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      String id =  (String) n.f1.f0.tokenImage;
      argu = (A) id;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id= (String) n.f1.f0.tokenImage;
//      n.f1.accept(this, argu);
      argu = (A)id;
      n.f2.accept(this, argu);
      String ide = (String) n.f3.f0.tokenImage;
//      n.f3.accept(this, argu);
      
      if(!cnames.contains(ide))
      {
    	  System.out.println("Symbol not found");
    	  System.exit(0);
      }
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      String tp = (String) n.f1.accept(this, argu);
      String id = (String) n.f2.f0.tokenImage;
//      n.f2.accept(this, argu);
      id = id+":"+(String) argu;
      argu = (A) id;
//      System.out.println("METHOD SCOPE "+ id);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String ret = (String) n.f10.accept(this, argu);
      int count = 0;

	  String prt = tp;
	  String cld = ret;
	  
	  while(true)
	  {
		  if(cld.equals(prt))
		  {
			  break;
		  }
		  if(!famtree.containsKey(cld))
		  {
			  System.out.println("Type error");
	    	  System.exit(0);
		  }
		  else
		  {
			  cld = famtree.get(cld);
		  }
	  }
 

      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      A arg = argu;
      argu =(A) "type";
      String tp =(String) n.f0.accept(this, argu);
//      System.out.println("TYPE received" + tp);
      if(tp.equals("int") || tp.equals("int[]")|| tp.equals("boolean"))
      {
    	  return (R) tp;
      }
      if(cnames.contains(tp))
      {
    	  return (R) tp;
      }
      else
      {
    	  System.out.println("Symbol not found");
    	  System.exit(0);
      }
      argu = arg;
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret= (R) "int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=(R) "boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret= (R) "int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String lhs = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String rhs = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      //search identifier in scope
      if(!lhs.equals(rhs))
      {
    	  String parent = lhs;
    	  String cld = rhs;
    	  String orig = rhs;
    	  int count=0;
    	  while(true)
    	  {
    		  if(!famtree.containsKey(cld))
    		  {
    			  System.out.println("Type error");
    	    	  System.exit(0);
    		  }
    		  else
    		  {
    			  cld = famtree.get(cld);
    			
    			  if(parent.equals(cld))
    			  {
    				  return _ret;
    			  }
    			  if(orig.equals(cld))
    			  {
    				  System.out.println("Type error");
        	    	  System.exit(0);
    			  }
    		  }
    		  count++;
    		  if(count >totclass)
    		  {
    			  System.out.println("Type error");
    	    	  System.exit(0);
    		  }
    	  }
    	  
      }
      
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String lhs1= (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String lhs2= (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String rhs = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);
//      System.out.println(lhs1+lhs2+rhs);
      if(rhs.equals("int") && lhs2.equals("int") && lhs1.equals("int[]"))
      {
//    	  System.out.println("Assignment successful"+ (String) argu);
      }
      else
      {
    	  System.out.println("Type error"); // +(String) argu);
    	  System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      String lhs = (String) n.f2.accept(this, argu);
      if(!lhs.equals("boolean"))
      {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String lhs = (String) n.f2.accept(this, argu);
      
      if(!lhs.equals("boolean"))
      {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String lhs = (String) n.f2.accept(this, argu);
      if(!lhs.equals("boolean"))
      {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String lhs = (String) n.f2.accept(this, argu);
      if(!lhs.equals("int"))
      {
    	  System.out.println("Type error"); // +(String) argu);
    	  System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String t1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2 = (String) n.f2.accept(this, argu);
      if(t1.equals("boolean") && t2.contentEquals("boolean"))
      {
    	  _ret = (R) t1;
//    	  System.out.println("FOUND AND BOOLEAN");
      }
      else
      {
    	  System.out.println("Type error"); // + (String) argu);
    	  System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String t1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2 = (String) n.f2.accept(this, argu);
      if(t1.equals("boolean") && t2.contentEquals("boolean"))
      {
    	  _ret = (R) t1;
      }
      else
      {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
//      System.out.println("ARRIVED COMPARE " +(String) argu);
      String t1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2 = (String) n.f2.accept(this, argu);
      if(t1.equals("int") && t2.equals("int"))
      {
    	  _ret = (R) "boolean";
      }
      else
      {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      
      String t1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2 = (String) n.f2.accept(this, argu);
      if(t1.equals(t2))
      {
    	  _ret = (R) "boolean";
      }
      else
      {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String t1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2 = (String) n.f2.accept(this, argu);
      if(t1.equals("int") && t2.equals("int"))
      {
    	  _ret = (R) "int";
      }
      else
      {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String t1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2 = (String) n.f2.accept(this, argu);
      if(t1.equals("int") && t2.equals("int"))
      {
    	  _ret = (R) "int";
      }
      else
      {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String t1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2 = (String) n.f2.accept(this, argu);
      if(t1.equals("int") && t2.equals("int"))
      {
    	  _ret = (R) "int";
      }
      else
      {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String t1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2 = (String) n.f2.accept(this, argu);
      if(t1.equals("int") && t2.equals("int"))
      {
    	  _ret = (R) "int";
      }
      else
      {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String t1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(t1.equals("int[]") && t2.equals("int"))
      {
    	  _ret = (R) "int";
      }
      else
      {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String t1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(t1.equals("int[]"))
      {
    	  _ret = (R) "int";
      }
      else
      {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
//      System.out.println("MSG SND");
      String ctype = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String fname = n.f2.f0.tokenImage;
      String fname0 = fname;
      fname = fname +"()";   
      String fret;
//      n.f2.accept(this, argu);
      String scope = fname0+":"+ctype;
      String orig_scope = scope;
      
      int count = 0;
      while(true)
      {
//    	  System.out.println(scope);
//    	  System.out.println("Serching for func "+ fname + " in "+(String) scope);
	      if(myclasses.containsKey(scope))
	      {
	    	 
	    	  Hashtable<String, String> ht = myclasses.get(scope);
//	    	  System.out.println(ht);
//	    	  System.out.println(ht.containsKey(fname));

		      if(ht.containsKey(fname))
		      {
		    	  fret = ht.get(fname);
//		    	  System.out.println("Found function: "+fret);
		    	  break;
		      }
	      }
//	      System.out.println(scope);

	      int l = scope.length();
		  int i=0;
		  String newscope = "";
		  int flag = 0;
		  //find parent class
		  while(i<l)
		  {
			  if(flag == 1)
			  {
				  newscope = newscope + scope.charAt(i);
			  }
			  else if(scope.charAt(i) == ':')
				  flag = 1;
			  
			  i++;
		  } 
		  
		  if(newscope.equals(""))
		  {
			  if(famtree.containsKey(scope))  
				  newscope = famtree.get(scope);
			  else
			  {
				  System.out.println("Symbol not found");
				  System.exit(0);
			  }
		  }
		  scope = newscope;
		  
		  if(scope.equals(orig_scope)) //cycle
		  {
				System.out.println("Symbol not found");
				System.exit(0);
		  }
		  count++;
		  if(count >totclass)
		  {
			  	System.out.println("Symbol not found");
				System.exit(0);
		  }
      }
      //now scope variable contains the fn declaration scope
      //fret contains return type of function
      //need to match arguments passed
      
      scope = fname0+":"+scope;
//      System.out.println("FunCtiON key "+ scope);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      Vector formalargs = fnargs.get(scope);
      
      int l1 = formalargs.size();
      int l2 = myargs.size();
//      System.out.println(myargs);
//      System.out.println(formalargs);
      
      if(l1!=l2)
      {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      
      int i=0;
      for(i=0; i<l1; i++)
      {
    	  //each argument should match or be a child of formal parameter
    	  String prt = (String) formalargs.get(i);
    	  String cld = (String) myargs.get(i);
    	  String orig = cld;
    	  count = 0;
          if(!prt.equals(cld))
          {
        	  while(true)
        	  {
//        		  System.out.println(prt + cld);
        		  if(!famtree.containsKey(cld))
        		  {
        			  System.out.println("Type error 2");
        	    	  System.exit(0);
        		  }
        		  else
        		  {
        			  cld = famtree.get(cld);
        			
        			  if(prt.equals(cld))
        			  {
        				  break;
        			  }
        			  if(orig.equals(cld))
        			  {
        				  System.out.println("Type error");
            	    	  System.exit(0);
        			  }
        		  }
        		  count++;
        		  if(count >totclass)
        		  {
        			  System.out.println("Type error");
        	    	  System.exit(0);
        		  }
        	  }
        	  
          }    	  
      }
      
      n.f5.accept(this, argu);
      myargs.clear();
      return  (R) fret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String t1 = (String) n.f0.accept(this, argu);
      myargs.add(t1);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t1 = (String) n.f1.accept(this, argu);
      myargs.add(t1);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret= (R) "int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=(R) "boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
	   R _ret=(R) "boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      
      String arg = (String) argu;
      if(arg.equals("type"))
      {
    	  return (R) id;
      }
      //check variable in scope
      if(cnames.contains(id))
      {
    	  System.out.println("Type error");
//    	  System.out.println("Class name same as var name"+(String) argu);
    	  System.exit(0);
      }
      //search at currnt scope
      String scope = (String) argu;
      String orig_scope = scope;
      while(true)
      {
	      Hashtable<String, String> ht = myclasses.get(scope);
//	      System.out.println("Serching for "+ id + " in "+(String) scope);
	      if(ht.containsKey(id))
	      {
//	    	  System.out.println("Found "  + id+ " in "+ scope);
	    	  return (R) ht.get(id);
	      }
	      
	      int l = scope.length();
		  int i=0;
		  String newscope = "";
		  int flag = 0;
		  //find parent class
		  while(i<l)
		  {
			  if(flag == 1)
			  {
				  newscope = newscope + scope.charAt(i);
			  }
			  else if(scope.charAt(i) == ':')
				  flag = 1;
			  
			  i++;
		  }
		  
		  if(newscope.equals(""))
		  {
			  if(famtree.containsKey(scope))  
				  newscope = famtree.get(scope);
			  else
			  {
				  System.out.println("Symbol not found");
				  System.exit(0);
			  }
		  }
		  scope = newscope;
		  
		  if(scope.equals(orig_scope)) //cycle
		  {
				System.out.println("Symbol not found");
				System.exit(0);
		  }
      }
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      n.f0.accept(this, argu);
      
      String scope = (String) argu;
      int l = scope.length();
	  int i=0;
	  String newscope = "";
	  int flag = 0;
	  //find parent class
	  while(i<l)
	  {
		  if(flag == 1)
		  {
			  newscope = newscope + scope.charAt(i);
		  }
		  else if(scope.charAt(i) == ':')
			  flag = 1;
		  
		  i++;
	  }
	  if(newscope.equals(""))
		  return (R) scope;
	  
	  else	  
		  return (R) newscope;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      _ret =(R) "int[]"; 
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.f0.tokenImage;
//    n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      //id should be a class name
      if(cnames.contains(id))
      {
    	  _ret = (R) id;
      }
      else
      {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t = (String) n.f1.accept(this, argu);
      if(t.equals("boolean"))
      {
    	  _ret = (R) t;
      }
      else
      {
    	  System.out.println("Type error");
//    	  System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
