//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class mips<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	public String code = "";
	int myargs=0;
	int myframe =  0;
	int ftime = 0;
	int maxoff = 0;
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
      {
    	 String lbl = (String) n.node.accept(this,argu);
    	 if(ftime ==0) code += lbl+":\t nop\n";
         return (R) lbl;
      }
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      code += "\t.text\n\t.globl    main\n";
      n.f0.accept(this, argu);
      code += "main:\n";
      n.f1.accept(this, argu);
      int nargs = Integer.parseInt((String)n.f2.accept(this, argu));
      myargs = nargs-4;
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      int fsize = Integer.parseInt((String)n.f5.accept(this, argu));
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      int maxargs = Integer.parseInt((String)n.f8.accept(this, argu));
      n.f9.accept(this, argu);
      
      code += "move $fp, $sp\n";
      int off = 0;
      if(maxargs>4)
      {
    	  off = maxargs-4;
      }
      maxoff = off;
      code += "subu $sp, $sp, " + Integer.toString((1+fsize+off)*4) + "\n";
      code += "sw $ra, -4($fp)\n";
      myframe = fsize+off;
      n.f10.accept(this, argu);
      
      code += "lw  $ra, -4($fp)\n";
      code += "addu $sp, $sp, " + Integer.toString((1+fsize+off)*4) + "\n";
      code += "j $ra\n";
      n.f11.accept(this, argu);
      ftime = 1;
      n.f12.accept(this, argu);
      
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      
      
      //get the halllocate and print functions
      code += "\n         .text\n" + 
      		"         .globl    _halloc\n" + 
      		"_halloc:\n" + 
      		"         li $v0, 9\n" + 
      		"         syscall\n" + 
      		"         j $ra\n" + 
      		"\n" + 
      		"         .text\n" + 
      		"         .globl    _print\n" + 
      		"_print:\n" + 
      		"         li $v0, 1\n" + 
      		"         syscall\n" + 
      		"         la $a0, newl\n" + 
      		"         li $v0, 4\n" + 
      		"         syscall\n" + 
      		"         j $ra\n";
      code += "         .data\n" + 
      		"         .align   0\n" + 
      		"newl:    .asciiz \"\\n\"";
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      ftime = 0;
      String fname= (String) n.f0.accept(this, argu);
      code += "\n\t.text\n\t.globl    "  + fname + "\n";
      code += fname + ":\n";
      n.f1.accept(this, argu);
      int nargs = Integer.parseInt((String)n.f2.accept(this, argu));
      myargs = nargs-4;
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      int fsize = Integer.parseInt((String)n.f5.accept(this, argu));
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      int maxargs = Integer.parseInt((String)n.f8.accept(this, argu));
      n.f9.accept(this, argu);
      int off = 0;
      
      if(maxargs>4)
      {
    	  off = maxargs-4;
      }
      maxoff = off;
      code += "sw $fp, -8($sp)\n";
      code += "move $fp, $sp\n";
      code += "subu $sp, $sp, " + Integer.toString((2+fsize+off)*4) +"\n";
      code += "sw $ra, -4($fp)\n";
      myframe = fsize+off;
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      ftime = 1;
      n.f12.accept(this, argu);
      
      code += "lw $ra, -4($fp)\n";
      code += "lw $fp, -8($fp)\n";
      code += "addu $sp, $sp, " + Integer.toString((2+fsize+off)*4) +"\n";
      code += "j $ra\n";
      
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      code += "nop\n";
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String) n.f1.accept(this, argu);
      String lbl = (String) n.f2.accept(this, argu);
      code += "beqz " + reg +" " + lbl + "\n";
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lbl = (String)n.f1.accept(this, argu);
      code += "b " + lbl + "\n";
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r1 = (String)n.f1.accept(this, argu);
      String lt = (String)n.f2.accept(this, argu);
      String r2 = (String)n.f3.accept(this, argu);
      code += "sw " + r2 + ", " +lt  + "(" + r1 + ")\n"; 
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r1 = (String)n.f1.accept(this, argu);
      String r2 = (String)n.f2.accept(this, argu);
      String lt = (String)n.f3.accept(this, argu);
      code += "lw " + r1 + ", " + lt + "(" + r2 + ")\n";
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r1 = (String) n.f1.accept(this, argu);
      String r2 = (String) n.f2.accept(this, argu);
      
      if(n.f2.f0.which == 0) //hallocate
      {
    	  code += "move " + r1 + ", $v0\n";
      }
      else if (n.f2.f0.which==1) //binOp
      {
    	  code += "move " + r1 + ", $v1\n";
      }
      else if(n.f2.f0.which ==2) //simple exp
      {
    	  if(r2.charAt(0)=='$')
    		  code += "move " + r1 + ", " + r2 + "\n";
    	  else if(r2.charAt(0)<='9' && r2.charAt(0) >= '0')
    		  code += "li " + r1 + ", " + r2 + "\n";
    	  else 
    		  code += "la " + r1 + ", " + r2 + "\n";    		  
    		  
    		  
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r1 = (String) n.f1.accept(this, argu);
      code += "move $a0, " + r1  + "\n";
      code += "jal _print\n";
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r1 = (String) n.f1.accept(this, argu);
      code += "lw " + r1 + ", ";
      n.f2.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      String r1 = (String) n.f2.accept(this, argu);
      
      code += "sw " + r1 + ", ";
      
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lt = (String) n.f1.accept(this, argu);
      String reg = (String)n.f2.accept(this, argu);
      int lit = Integer.parseInt(lt);
      code += "sw " + reg + ", " + Integer.toString((lit-1)*4) +"($sp)\n";
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String fn = (String) n.f1.accept(this, argu);
      code += "jalr "  + fn + "\n";
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r1 = (String) n.f1.accept(this, argu);
      if(n.f1.f0.which == 0)
    	  code += "move $a0, " + r1  + "\n";
      else if (n.f1.f0.which == 1)
    	  code += "li $a0, " + r1  + "\n";
      code += "jal _halloc\n";
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r1= (String) n.f1.accept(this, argu);
      String r2 = (String)n.f2.accept(this, argu);
      
      code += "$v1, " + r1 +  ", " + r2  + "\n";
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(n.f0.which==0)
      {
    	  code += "sle ";
      }
      else if(n.f0.which==1)
      {
    	  code += "sne ";
      }
      else if(n.f0.which==2)
      {
    	  code += "add ";
      }
      else if(n.f0.which==3)
      {
    	  code += "sub ";
      }
      else if(n.f0.which==4)
      {
    	  code += "mul ";
      }
      else if(n.f0.which==5)
      {
    	  code += "div ";
      }
      
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lt = (String)n.f1.accept(this, argu);
      int lit = Integer.parseInt(lt);
      
      if(lit < myargs) //is my argument
      {
    	  code += Integer.toString((lit)*4) + "($fp)\n";
      }
      else
      {
    	  code += Integer.toString((myframe-lit-maxoff-1)*4) + "($sp)\n";
      }
      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
//      R _ret=null;
      String reg = (String) n.f0.accept(this, argu);
      String r = "$" + reg;
      return (R) r;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
//      System.out.println((String) _ret);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
