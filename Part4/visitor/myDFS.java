//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class myDFS<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	int infunc;
	int islabel;
	public String IR = "";
	public int count = 1000;
	
	String newvar() {
		return "TEMP " + Integer.toString(count++);
	}
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      String args = "";
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         args += " " + (String) e.nextElement().accept(this,argu);
         _count++;
      }
      return (R) args;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         String args = "";
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            args += " " + (String) e.nextElement().accept(this,argu);
            _count++;
         }
         return (R) args;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }
   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      
      IR += "MAIN\n";
      infunc = 10;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      IR += "END\n\n";
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      islabel = 1;
      n.f0.accept(this, argu);
      islabel = 0;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      infunc = 0;
      String l = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String num = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      IR += l + " [ "+ num  + " ] \n" + "BEGIN\n";
      n.f4.accept(this, argu);
      IR += "END \n\n";
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      islabel = 0;
      n.f0.accept(this, argu);
      islabel = 1;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      IR += " NOOP \n";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      IR += " ERROR\n";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      String temp = (String) n.f1.accept(this, argu);
      String l = (String) n.f2.accept(this, argu);
      IR += "CJUMP " + temp + " ";
      IR += l + "\n";
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String l = (String) n.f1.accept(this, argu);
      IR += "JUMP " + l + "\n";
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      String temp1 = (String) n.f1.accept(this, argu);
      String num = (String) n.f2.accept(this, argu);
      String temp2 = (String) n.f3.accept(this, argu);
      
      IR += "HSTORE " + temp1 + " " + num  + " " +  temp2 + "\n";
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temp1 = (String) n.f1.accept(this, argu);
      String temp2 = (String) n.f2.accept(this, argu);
      String num = (String) n.f3.accept(this, argu);
      IR += "HLOAD " +  temp1 + " " + temp2 + " " + num + "\n"; 
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temp1 = (String) n.f1.accept(this, argu);
      String temp2 = (String) n.f2.accept(this, argu);
      
      IR += "MOVE " + temp1 + " " + temp2 + "\n";
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temp1 = (String) n.f1.accept(this, argu);
      
      IR += "PRINT " + temp1 + "\n";
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      String t1 = newvar();
      String temp1 = (String) n.f0.accept(this, argu);
      IR += "MOVE " +  t1 + " " +temp1 + "\n";
      return (R) t1;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      int retn = 0;
      infunc ++;
      if (infunc == 1)
      {
    	  retn = 1;
      }
      else
    	  retn = 0;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String temp1 = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(retn == 1)
      {
    	  IR += "RETURN " + temp1 + "\n";
      }
      return (R) temp1;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      String temp1 = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String args = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      String id = "CALL " + temp1 + " ( " + args + " )"; 
      return (R) id;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temp1 = (String) n.f1.accept(this, argu);
      String t = " HALLOCATE " + temp1 ;
      return (R) t;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String temp1 = (String) n.f0.accept(this, argu);
      String temp2 = (String) n.f1.accept(this, argu);
      String temp3 = (String) n.f2.accept(this, argu);
       
      String t = temp1 + " " + temp2 + " " + temp3 ;
      return (R) t;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
//      R _ret=null;
      String id = "TEMP ";
      n.f0.accept(this, argu);
      id += (String) n.f1.accept(this, argu);
      return (R) id;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      if(islabel == 1)
      {
    	  IR += (String) _ret + "\n";
    	  return null;
      }
      return _ret;
   }

}
