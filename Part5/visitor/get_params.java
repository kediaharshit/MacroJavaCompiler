//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class get_params<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	public Hashtable <String, Vector <Set<String>>> uses = new Hashtable <String, Vector <Set<String>>>();;
	public Hashtable <String, Vector <Set<String>>> defs = new Hashtable <String, Vector <Set<String>>>();
	public Hashtable <String, Hashtable<Integer, Vector<String>> > succs =new Hashtable <String, Hashtable<Integer, Vector<String>> >();
	public Hashtable <String, Hashtable<String, Integer>> lblpos =new Hashtable <String, Hashtable<String, Integer>> ();
	public Hashtable <String, Set<String>> temps = new Hashtable <String, Set<String>>();
	public Hashtable <String, Integer> fnargs = new Hashtable <String, Integer>();
	public Hashtable <String, Hashtable <String,String>> relabel = new Hashtable <String, Hashtable <String,String>>();
	
	Vector <Set<String>> use; // =  new Vector <Set<String>>();
	Vector <Set<String>> def;// =  new Vector <Set<String>>();
	Hashtable <Integer, Vector <String>> su;// = new Hashtable <Integer, Vector <String>>();
	Hashtable <String, Integer> lbls;// = new Hashtable <String, Integer>();
	Set <String> temp_used;// = new HashSet <String>();
	Hashtable <String, String> re_label;
	int labelcntr = 1000;
	
	Set<String> usen = new HashSet<String> ();
	Set<String> defn = new HashSet<String> ();
	Vector <String> sccn = new Vector <String>();
	
	String curr_met = "";
	int lineno = 0;
	int atarg = 0;
	int atmeth = 0;
	int first = 0;
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
        	 if(atarg==0 && atmeth==0)
        	 {	 
//        		 if(first != 1)
        			 defn = new HashSet<String> ();
        		 usen = new HashSet<String> ();
	       		 sccn = new Vector <String> ();
        	 }
       		 String t = (String) e.nextElement().accept(this,argu);
            _count++;
            if(atarg==0 && atmeth==0)
	       	 {	
//            	 System.out.println("lmao" + usen);
            	 use.add(usen);
	       		 def.add(defn);
	       		 su.put(lineno, sccn);
	       		 lineno ++;
	       		 usen = new HashSet<String> ();
	       		 defn = new HashSet<String> ();
	       		 sccn = new Vector <String> ();
	       		 if(e.hasMoreElements())
	       		 {
//	       			 System.out.println("hasmore " +lineno);
	       			 Vector <String> v = su.get(lineno -1);
	       			 v.add(Integer.toString(lineno));
	       			 su.put(lineno-1, v);
	       		 }
	       	 }
            else
            {
            	usen.add(t);
            }
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
      {	
    	  String lbl = (String) n.node.accept(this,argu);
//    	  System.out.println(lbl);
    	  lbls.put(lbl, lineno);
    	  labelcntr ++;
    	  re_label.put(lbl, ("L"+Integer.toString(labelcntr)));
         return n.node.accept(this,argu);
      }
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
	  R _ret=null;
	  
	  
	  curr_met = "MAIN";
	  use =  new Vector <Set<String>>();
  	  def =  new Vector <Set<String>>();
  	  su = new Hashtable <Integer, Vector <String>>();
  	  lbls = new Hashtable <String, Integer>();
  	  temp_used = new HashSet <String>();
	  re_label = new Hashtable <String, String> ();
  	  fnargs.put(curr_met, 0);
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
//      System.out.println(use);
//      System.out.println(def);
//      System.out.println(su);
//      System.out.println(lbls);
//    System.out.println("HELLO THERE");    
      
      lblpos.put(curr_met, lbls);
      uses.put(curr_met, use);
      defs.put(curr_met, def);
      succs.put(curr_met, su);
      temps.put(curr_met, temp_used);
      relabel.put(curr_met, re_label);
      atmeth = 1;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
//      System.out.println("lines: " + lineno);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      lineno = 0;
      atmeth = 0;
      use =  new Vector <Set<String>>();
  	  def =  new Vector <Set<String>>();
  	  su = new Hashtable <Integer, Vector <String>>();
  	  lbls = new Hashtable <String, Integer>();
  	  temp_used = new HashSet <String>();
  	  re_label = new Hashtable <String, String> ();
      curr_met = (String) n.f0.accept(this, argu);
      
//      System.out.println(curr_met);
      n.f1.accept(this, argu);
      String narg = (String) n.f2.accept(this, argu);
      int l = Integer.parseInt(narg);
//      first = 1;
      
      fnargs.put(curr_met, l);
      
      for(int i=0; i<l; i++)
      {
    	  defn.add("TEMP"+Integer.toString(i));
      }
      use.add(new HashSet<String>());
      def.add(defn);
      su.put(lineno, sccn);
      lineno++;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      
      
      uses.put(curr_met, use);
      defs.put(curr_met, def);
      succs.put(curr_met, su);
      lblpos.put(curr_met, lbls);
      temps.put(curr_met, temp_used);
      relabel.put(curr_met, re_label);
//      System.out.println("\nsccs fn " + succs);
      atmeth = 1;
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t1 = (String) n.f1.accept(this, argu);
      String l1 = (String) n.f2.accept(this, argu);
      usen.add(t1);
      sccn.add(l1);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String l1 = (String) n.f1.accept(this, argu);
      sccn.add(l1);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t1 = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String t2 = (String) n.f3.accept(this, argu);
      usen.add(t1);
      usen.add(t2);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t1 = (String) n.f1.accept(this, argu);
      String t2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      defn.add(t1);
      usen.add(t2);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t1 = (String) n.f1.accept(this, argu);
      defn.add(t1);
//      System.out.println("move " + defn);
      String t2 = (String) n.f2.accept(this, argu);
      if( t2!= null && t2.charAt(0)=='T')
    	  usen.add(t2);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t1 = (String) n.f1.accept(this, argu);
      if( t1!= null && t1.charAt(0) == 'T')
    	  usen.add(t1);
      
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String t1 = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      if(t1!= null && t1.charAt(0)=='T')
      {
    	  usen.add(t1);    	
//    	  System.out.println("usen " + usen);
      }     
      use.add(usen);
      def.add(defn);
      Vector <String> v = su.remove(lineno-1);
	  v.add(Integer.toString(lineno));
	  su.put(lineno-1, v);
	  if(su.containsKey(lineno))
	  {
//		  System.out.println("heeres");
		  su.remove(lineno);
	  }
		  su.put(lineno, new  Vector<String> ());
		  
	  usen = new HashSet<String> ();
	 defn = new HashSet<String> ();
	 sccn = new Vector <String> ();
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t1 = (String) n.f1.accept(this, argu);
      if( t1!= null && t1.charAt(0)=='T')
    	  usen.add(t1);
      n.f2.accept(this, argu);
      atarg = 1;
      n.f3.accept(this, argu);
      atarg = 0;
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t1 = (String) n.f1.accept(this, argu);
      if( t1!= null && t1.charAt(0)=='T')
    	  usen.add(t1);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t1 = (String) n.f1.accept(this, argu);
      String t2 = (String) n.f2.accept(this, argu);
      usen.add(t1);
      if( t2!= null && t2.charAt(0)=='T')
    	  usen.add(t2);
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lit = (String) n.f1.accept(this, argu);
      temp_used.add("TEMP"+lit.toString() );
      return (R) ("TEMP"+lit.toString() );
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

}
